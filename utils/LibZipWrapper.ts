import { createVM } from "@ethereumjs/vm";
import { BytesLike, getBytes, Interface } from "ethers";
import { Address } from "@ethereumjs/util";
import deasync from "deasync";

const abi = [
  "function compress(bytes memory data) public pure returns (bytes memory)",
  "function decompress(bytes memory data) public pure returns (bytes memory)",
  "function cdCompress(bytes memory data) public pure returns (bytes memory)",
  "function cdDecompress(bytes memory data) public pure returns (bytes memory)",
];

const iface = new Interface(abi);

const getEVM = async () => {
  return (await createVM()).evm;
};

const caller = new Address(
  Buffer.from("1234500000000000000000000000000000000000", "hex")
);
const libZipWrapperAddr = new Address(
  Buffer.from("8888000000000000000000000000000000000000", "hex")
);

// LibZipWrapper runtime bytecode
const deployedBytecode =
  "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80635cd3f3a1146100515780637612a40e1461007a5780637e2224bd1461008d57806383a09505146100a0575b600080fd5b61006461005f36600461081d565b6100b3565b60405161007191906108ec565b60405180910390f35b61006461008836600461081d565b6100c4565b61006461009b36600461081d565b6100cf565b6100646100ae36600461081d565b6100da565b60606100be826100e5565b92915050565b60606100be826101cb565b60606100be8261027e565b60606100be826105aa565b6060815160208301016040519150602082016020840193505b818410156101945783518060001a8060051c806101315750600186810151845295810160020195920190910190506100fe565b600781148360011a6007018218810282186002019150600184826001011a84601f1660081b01018086036020821860208311028218915060005b8181015188820152820184811061016b5750505096909601600201959290920191506100fe9050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08382030183526000815260200160405250919050565b60608151156102795760405190506020810160048301805184518501811983525b80861015610244576001860195508551601f1a80610235576001870196508651601f1a6000198652607f811161022457600181013887395b607f169490940160010193506101ec565b808553506001840193506101ec565b5090527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828203018252600081526020016040525b919050565b606061041c565b818153600101919050565b600082840393505b838110156102b95782810151828201511860001a1590930292600101610298565b9392505050565b825b6020821061030c5782516102d7601f83610285565b52602092909201917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909101906021016102c2565b81156102b95782516103216001840383610285565b520160010192915050565b60006001830392505b610107821061036d5761035f8360ff1661035a60fd61035a8760081c60e00189610285565b610285565b935061010682039150610335565b6007821061039a576103938360ff1661035a6007850361035a8760081c60e00189610285565b90506102b9565b6103b38360ff1661035a8560081c8560051b0187610285565b949350505050565b6104148282036103f86103e884600081518060001a8160011a60081b178160021a60101b17915050919050565b639e3779b90260131c611fff1690565b8060021b6040510182815160e01c1860e01b8151188152505050565b600101919050565b6180003860405139618000604051016020830180600d8551820103826002015b8181101561054f576000805b50508051604051600082901a600183901a60081b1760029290921a60101b91909117639e3779b9810260111c617ffc16909101805160e081811c878603811890911b909118909152840190818303908484106104a457506104df565b600184019350611fff82116104d9578251600081901a600182901a60081b1760029190911a60101b1781036104d957506104df565b50610448565b8383106104ed57505061054f565b6001830392508583111561050b5761050887878886036102c0565b96505b61051f600985016003850160038501610290565b915061052c87828461032c565b9650506105448461053f868486016103bb565b6103bb565b91505080935061043c565b505061056183838488518501036102c0565b925050506040519150618000820180820391508183526020830160005b8381101561059657828101518282015260200161057e565b506000920191825250602001604052919050565b6060604051905060208101600080845185015b80861461075a576001860195508551601f1a806106515782156105f357608060ff808501161760f01b8552600285016000935094505b60018401937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810161064b577e7f0000000000000000000000000000000000000000000000000000000000008552600285016000945094505b506105bd565b60ff81036106f1578315610694577eff00000000000000000000000000000000000000000000000000000000000060ff850160f01b168552600285016000945094505b60018301927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe10161064b577e9f000000000000000000000000000000000000000000000000000000000000855260028501600093509450506105bd565b821561071057608060ff808501161760f01b8552600285016000935094505b831561074b577eff00000000000000000000000000000000000000000000000000000000000060ff850160f01b168552600285016000945094505b808553506001840193506105bd565b5080156107785760ff9081011660801760f01b825260029091019060005b5080156107ae5760ff0160f01b7eff00000000000000000000000000000000000000000000000000000000000016815260020160005b506004820180511990527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820301825260008152602001604052919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561082f57600080fd5b813567ffffffffffffffff8082111561084757600080fd5b818401915084601f83011261085b57600080fd5b81358181111561086d5761086d6107ee565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156108b3576108b36107ee565b816040528281528760208487010111156108cc57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b81811015610919578581018301518582016040015282016108fd565b8181111561092b576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201604001939250505056fea164736f6c634300080f000a";

export class LibZipWrapper {
  static flzCompress = async (data: BytesLike) => {
    const evm = await getEVM();

    await evm.stateManager.putCode(
      libZipWrapperAddr,
      Buffer.from(deployedBytecode.slice(2), "hex")
    );

    const calldata = iface.encodeFunctionData("compress", [data]);

    const result = await evm.runCall({
      caller: caller,
      to: libZipWrapperAddr,
      data: Buffer.from(calldata.slice(2), "hex"),
      gasLimit: 10_000_000n,
    });

    const decoded = iface.decodeFunctionResult(
      "compress",
      result.execResult.returnValue
    );
    return getBytes(decoded[0]);
  };

    static flzCompressSync = (data: BytesLike) => {
    let done = false;
    let output: Uint8Array | undefined;
    let error: any;

    LibZipWrapper.flzCompress(data)
      .then((res) => {
        output = res;
        done = true;
      })
      .catch((err) => {
        error = err;
        done = true;
      });

    deasync.loopWhile(() => !done);

    if (error) throw error;
    return output!;
  };

}
